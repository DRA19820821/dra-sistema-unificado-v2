#!/usr/bin/env python3
"""
Script de teste para verificar se o processamento paralelo est√° funcionando.
VERS√ÉO CORRIGIDA - For√ßa UTF-8 para compatibilidade Windows

Uso:
    python test_parallel_fix.py
"""

import sys
from pathlib import Path

# Adiciona backend ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

print("="*70)
print("  üß™ TESTE: PROCESSAMENTO PARALELO")
print("="*70)

# ============================================
# TESTE 1: IMPORTS
# ============================================

print("\n1Ô∏è‚É£ Testando imports...")

try:
    from backend.agents.mapas.graph import execute_graph
    print("   ‚úÖ execute_graph (sequencial) importado")
except ImportError as e:
    print(f"   ‚ùå Erro ao importar execute_graph: {e}")
    sys.exit(1)

try:
    from backend.agents.mapas.graph_parallel import execute_graph_parallel
    print("   ‚úÖ execute_graph_parallel (paralelo) importado")
except ImportError as e:
    print(f"   ‚ùå Erro ao importar execute_graph_parallel: {e}")
    sys.exit(1)

# ============================================
# TESTE 2: VERIFICAR ASSINATURAS
# ============================================

print("\n2Ô∏è‚É£ Verificando assinaturas das fun√ß√µes...")

import inspect

# Sequencial
sig_seq = inspect.signature(execute_graph)
params_seq = list(sig_seq.parameters.keys())
print(f"   üìù execute_graph: {params_seq}")

# Paralelo
sig_par = inspect.signature(execute_graph_parallel)
params_par = list(sig_par.parameters.keys())
print(f"   üöÄ execute_graph_parallel: {params_par}")

# Valida√ß√µes
expected_seq = ['html_filename', 'llm01_provider', 'llm02_provider', 'llm03_provider', 'max_tentativas']
expected_par = ['html_filename', 'llm01_provider', 'llm02_provider', 'llm03_provider', 'max_tentativas', 'max_workers']

if all(p in params_seq for p in expected_seq):
    print("   ‚úÖ Sequencial: par√¢metros OK")
else:
    print("   ‚ùå Sequencial: par√¢metros incorretos")

if all(p in params_par for p in expected_par):
    print("   ‚úÖ Paralelo: par√¢metros OK (inclui max_workers)")
else:
    print("   ‚ùå Paralelo: par√¢metros incorretos")

# ============================================
# TESTE 3: VERIFICAR ROUTES_PIPELINE
# ============================================

print("\n3Ô∏è‚É£ Verificando routes_pipeline.py...")

routes_file = Path("backend/api/routes_pipeline.py")

if not routes_file.exists():
    print("   ‚ùå Arquivo routes_pipeline.py n√£o encontrado!")
    sys.exit(1)

# ‚úÖ FIX: For√ßa UTF-8 encoding
try:
    content = routes_file.read_text(encoding='utf-8')
except UnicodeDecodeError:
    # Se UTF-8 falhar, tenta latin-1
    try:
        content = routes_file.read_text(encoding='latin-1')
        print("   ‚ö†Ô∏è  Arquivo lido com encoding latin-1 (n√£o UTF-8)")
    except Exception as e:
        print(f"   ‚ùå Erro ao ler arquivo: {e}")
        sys.exit(1)

# Verifica imports
checks = {
    "Import sequencial": "from ..agents.mapas.graph import execute_graph" in content,
    "Import paralelo": "from ..agents.mapas.graph_parallel import execute_graph_parallel" in content,
    "Par√¢metro modo": "modo: str" in content,
    "Decis√£o if paralelo": "if modo == \"paralelo\":" in content or "if modo == 'paralelo':" in content,
    "Chamada execute_graph_parallel": "await execute_graph_parallel(" in content,
    "Log paralelo": "PARALELO" in content,
}

all_ok = True
for check_name, passed in checks.items():
    if passed:
        print(f"   ‚úÖ {check_name}")
    else:
        print(f"   ‚ùå {check_name} - N√ÉO ENCONTRADO!")
        all_ok = False

if not all_ok:
    print("\n   ‚ö†Ô∏è  O arquivo routes_pipeline.py N√ÉO est√° com o fix aplicado!")
    print("   üìù Execute: cp routes_pipeline_CORRIGIDO.py backend/api/routes_pipeline.py")
    sys.exit(1)

# ============================================
# TESTE 4: VERIFICAR L√ìGICA DE DECIS√ÉO
# ============================================

print("\n4Ô∏è‚É£ Verificando l√≥gica de decis√£o...")

# Procura pela estrutura if/else
if ('if modo == "paralelo":' in content or "if modo == 'paralelo':" in content) and 'execute_graph_parallel' in content:
    print("   ‚úÖ Decis√£o entre sequencial e paralelo implementada")
else:
    print("   ‚ùå Decis√£o entre sequencial e paralelo N√ÉO implementada")
    all_ok = False

# Procura se o modo √© passado como par√¢metro
if "modo=modo" in content or "modo=\"paralelo\"" in content or "modo='paralelo'" in content or "modo=\"sequencial\"" in content or "modo='sequencial'" in content:
    print("   ‚úÖ Par√¢metro modo sendo passado corretamente")
else:
    print("   ‚ö†Ô∏è  Par√¢metro modo pode n√£o estar sendo passado")

# ============================================
# TESTE 5: VERIFICAR LOGS
# ============================================

print("\n5Ô∏è‚É£ Verificando logs informativos...")

log_checks = {
    "Log sequencial": "SEQUENCIAL" in content,
    "Log paralelo": "PARALELO" in content,
    "Log modo": "modo:" in content,
}

for check_name, passed in log_checks.items():
    if passed:
        print(f"   ‚úÖ {check_name}")
    else:
        print(f"   ‚ö†Ô∏è  {check_name} - ausente")

# ============================================
# RESUMO
# ============================================

print("\n" + "="*70)
print("  üìä RESUMO")
print("="*70)

if all_ok:
    print("\n   ‚úÖ TUDO OK! Processamento paralelo est√° funcionando.")
    print("\n   üöÄ Pr√≥ximos passos:")
    print("      1. Reinicie o servidor: python run.py")
    print("      2. Acesse a interface: http://localhost:8000")
    print("      3. Escolha modo 'Paralelo'")
    print("      4. Observe os logs mostrando 'PARALELO'")
    print("\n   üìä Performance esperada:")
    print("      - Sequencial: ~10-15 min para 3 t√≥picos")
    print("      - Paralelo: ~4-6 min para 3 t√≥picos (2-3x mais r√°pido)")
    sys.exit(0)
else:
    print("\n   ‚ùå Alguns problemas encontrados!")
    print("\n   üìù Para aplicar o fix:")
    print("      cp routes_pipeline_CORRIGIDO.py backend/api/routes_pipeline.py")
    sys.exit(1)